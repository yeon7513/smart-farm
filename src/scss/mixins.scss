@mixin flexCenter() {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 꽉 채운 버튼 (span으로 버튼의 내용 묶어야함) */
@mixin packedBtn(
  $padding: 8px 16px,
  $hoverColor: var(--common-color),
  $commonColor: var(--hover-color),
  $mainColor: var(--main-color),
  $fontColor: #333,
  $borderRadius: 9999px
) {
  position: relative;
  background-color: $commonColor;
  overflow: hidden;
  padding: $padding;
  border-radius: $borderRadius;

  > span {
    position: relative;
    z-index: 10;
    transition: 0.3s;
    color: $fontColor;
  }

  &:hover span {
    color: $mainColor;
  }

  &::before,
  &::after {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  &::before {
    content: '';
    background-color: $hoverColor;
    width: 130%;
    left: -15%;
    transform: skew(5deg);
    transition: transform 0.3s cubic-bezier(0.3, 1, 0.8, 1);
  }

  &:hover {
    &::before {
      transform: translate3d(100%, 0, 0);
    }
  }

  &.active {
    &::before {
      transform: translate3d(100%, 0, 0);
    }

    > span {
      color: $mainColor;
    }
  }
}

/* 선형 버튼 */
@mixin linearBtn(
  $padding: 8px 16px,
  $commonColor: var(--common-color),
  $accentColor: var(--accent-color),
  $hoverColor: var(--hover-color),
  $mainColor: var(--main-color),
  $fontColor: #333,
  $borderRadius: 4px
) {
  overflow: hidden;
  position: relative;
  z-index: 1;
  padding: $padding;
  border: 1px solid $commonColor;
  border-radius: $borderRadius;
  color: $accentColor;

  &::before,
  &::after {
    content: '';
    position: absolute;
    z-index: -1;
    display: block;
    border-radius: 50%;
    transition: all 0.5s 0.1s cubic-bezier(0.55, 0, 0.1, 1);
  }

  &::before {
    top: 100%;
    left: 50%;
    width: 140%;
    height: 180%;
    background-color: rgba(0, 0, 0, 0.05);
    transform: translateX(-50%) scaleY(1) scaleX(1.25);
  }

  &::after {
    top: 180%;
    left: 55%;
    width: 160%;
    height: 190%;
    background-color: $hoverColor;
    transform: translateX(-50%) scaleY(1) scaleX(1.45);
  }

  &:hover {
    border: 1px solid $hoverColor;
    color: $mainColor;

    &::before {
      top: -35%;
      background-color: $hoverColor;
      transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
    }

    &::after {
      top: -45%;
      background-color: $hoverColor;
      transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
    }
  }

  &.active {
    background-color: $hoverColor;
    border: 1px solid $hoverColor;
    color: $mainColor;
  }
}

/* 빈 배경에서 채워지는 버튼 */
@mixin filledBtn(
  $padding: 8px 16px,
  $hoverColor: var(--hover-color),
  $mainColor: var(--main-color)
) {
  position: relative;
  padding: $padding;
  z-index: 10;

  &:hover {
    color: $mainColor;
    transition-delay: 0.5s;

    &::before {
      width: 100%;
    }

    &::after {
      height: 100%;
      transition-delay: 0.4s;
    }
  }

  &::before,
  &::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
  }

  &::before {
    width: 0;
    height: 2px;
    background-color: $hoverColor;
    transition: 0.5s ease;
  }

  &::after {
    z-index: -1;
    width: 100%;
    height: 0;
    background-color: $hoverColor;
    transition: 0.4s ease;
  }

  &.active {
    color: $mainColor;
    background-color: $hoverColor;
    &::before {
      width: 100%;
    }

    &::after {
      height: 100%;
    }
  }
}

/* 링크 효과 */
@mixin linkEffect(
  $commonColor: var(--common-color),
  $accentColor: var(--accent-color),
  $hoverColor: var(--hover-color),
  $mainColor: var(--main-color)
) {
  position: relative;
  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);

  &:hover {
    color: $hoverColor;

    &::after {
      left: 0%;
      width: 100%;
    }
  }

  &::after {
    content: '';
    position: absolute;
    left: 50%;
    bottom: -5px;
    width: 0%;
    height: 2px;
    background-color: $hoverColor;
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  &.active {
    color: $hoverColor;
    &::after {
      content: '';
      position: absolute;
      left: 0%;
      bottom: -5px;
      width: 100%;
      height: 2px;
      background-color: $hoverColor;
      transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    }
  }
}

// 기어
@mixin gear($size: 60px, $top: 15px, $left: 35px) {
  width: $size;
  height: $size * 0.67;
  position: relative;
  display: inline-block;
  background-color: #fff;

  &::before {
    content: '';
    left: 0;
    top: 0;
    position: absolute;
    width: $size * 0.6;
    height: $size * 0.6;
    border-radius: 50%;
    background-color: var(--accent-color);
    background-image: radial-gradient(
        circle #{$size * 0.1333} at 50% 50%,
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.3} #{$size * 0},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0} #{$size * 0.3},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.6} #{$size * 0.3},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.3} #{$size * 0.6},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.5} #{$size * 0.0833},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.5} #{$size * 0.0833},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.5} #{$size * 0.5},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.0833} #{$size * 0.5},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0667} at #{$size * 0.0833} #{$size * 0.0833},
        #fff 100%,
        transparent 0
      );
    background-repeat: no-repeat;
    box-sizing: border-box;
    animation: rotationBack 3s linear infinite;
  }

  &::after {
    content: '';
    left: $left;
    top: $top;
    position: absolute;
    width: $size * 0.4;
    height: $size * 0.4;
    border-radius: 50%;
    background-color: var(--common-color);
    background-image: radial-gradient(
        circle #{$size * 0.0833} at 50% 50%,
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.2} 0,
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at 0 #{$size * 0.2},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.4} #{$size * 0.2},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.2} #{$size * 0.4},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.3333} #{$size * 0.05},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.3333} #{$size * 0.05},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.3333} #{$size * 0.3333},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.05} #{$size * 0.3333},
        #fff 100%,
        transparent 0
      ),
      radial-gradient(
        circle #{$size * 0.0417} at #{$size * 0.05} #{$size * 0.05},
        #fff 100%,
        transparent 0
      );
    background-repeat: no-repeat;
    box-sizing: border-box;
    animation: rotationBack 4s linear infinite reverse;
  }

  &.stop {
    &::before,
    &::after {
      animation: none;
    }
  }
}

@keyframes rotationBack {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(-360deg);
  }
}
